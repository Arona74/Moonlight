plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

architectury {
    platformSetupLoomIde()
    forge()
}


loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath

    forge {
        convertAccessWideners = true
        extraAccessWideners.add loom.accessWidenerPath.get().asFile.name

        mixinConfig  "moonlight-common.mixins.json"
        mixinConfig  "moonlight.mixins.json"
    }
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

dependencies {
    forge "net.minecraftforge:forge:${rootProject.forge_version}"
    // Remove the next line if you don't want to depend on the API
    // modApi "dev.architectury:architectury-forge:${rootProject.architectury_version}"


    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive = false }

    modCompileOnly ("curse.maven:configured-457570:4011355")

    modCompileOnly ("curse.maven:map-atlases-forge-519759:3949437")
   // modRuntimeOnly("com.tterrag.registrate:Registrate:MC1.19-1.1.5")
   //// modImplementation("com.jozufozu.flywheel:flywheel-forge-${flywheel_minecraft_version}:${flywheel_version}")

   // modRuntimeOnly("net.mehvahdjukaar:supplementaries-forge:1.19.2-2.2.3")


}

processResources {
    inputs.property "version", project.version
    //inputs.property "mod_name": project.getArchivesBaseName()

    filesMatching("META-INF/mods.toml") {
        expand "version": project.version
        expand "mod_name": project.getArchivesBaseName()
    }
}

shadowJar {
    exclude "fabric.mod.json"
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    classifier "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    classifier "forge"
}

task updateJson {
    file('update.json').withWriter { w ->
        file('update_template.json').eachLine { line ->
            w << line.replaceAll("version", project.version) + System.getProperty("line.separator")
        }
        w.close()
    }
}

jar {
    classifier "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenForge(MavenPublication) {
            artifactId = rootProject.mod_id + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        maven {
            url = "https://www.cursemaven.com"
            allowInsecureProtocol = true
        }

    }
}


task publishCurseForge(type: net.darkhax.curseforgegradle.TaskPublishCurseForge) {

    apiToken = System.getenv('curseforge_token')
    disableVersionDetection()

    def mainFile = upload(rootProject.project_id, file("${project.buildDir}/libs/${archivesBaseName}-${version}-forge.jar"))
    mainFile.changelog = rootProject.file('changelog.md')
    mainFile.changelogType = "markdown"
    mainFile.releaseType = "release"
    mainFile.addGameVersion(rootProject.minecraft_version)
    mainFile.addModLoader("forge")
}
