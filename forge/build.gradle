plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

architectury {
    platformSetupLoomIde()
    neoForge {
        platformPackage = "forge"
    }
}


loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentNeoForge.extendsFrom common
}

dependencies {
        neoForge "net.neoforged:neoforge:${forge_version}"


    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionNeoForge")) { transitive = false }

    modCompileOnly ("curse.maven:configured-457570:4462894")
    modCompileOnly("curse.maven:yacl-667299:4523736")

    modCompileOnly("curse.maven:autoreglib-250363:3857246")
    modCompileOnly("curse.maven:quark-oddities-301051:3575623")
    modCompileOnly("curse.maven:quark-243121:4463411")
    modCompileOnly("curse.maven:the-twilight-forest-227639:4755494")
   // modRuntimeOnly("com.tterrag.registrate:Registrate:MC1.19-1.1.5")
   //// modImplementation("com.jozufozu.flywheel:flywheel-forge-${flywheel_minecraft_version}:${flywheel_version}")

   // modRuntimeOnly("net.mehvahdjukaar:supplementaries-forge:1.19.2-2.2.3")
    modCompileOnly("curse.maven:map-atlases-forge-519759:4784907")
}

processResources {
    inputs.property "version", project.version
    //inputs.property "mod_name": project.getArchivesBaseName()

    filesMatching("META-INF/mods.toml") {
        expand "version": project.version
        expand "mod_name": project.getArchivesBaseName()
    }
}

shadowJar {
    exclude "fabric.mod.json"
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier = "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier = "forge"

    exclude('net/mehvahdjukaar/moonlight/example/**')
}

task updateJson {
    file('update.json').withWriter { w ->
        file('update_template.json').eachLine { line ->
            w << line.replaceAll("version", project.version) + System.getProperty("line.separator")
        }
        w.close()
    }
}

jar {
    archiveClassifier = "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }

    archiveClassifier = "forge-sources"
}

remapSourcesJar{
    archiveClassifier = "forge-sources"
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenForge(MavenPublication) {
            artifactId = rootProject.mod_id + "-" + project.name
            from components.java
        }
    }

    repositories {
        maven {
            url = "https://www.cursemaven.com"
            allowInsecureProtocol = true
        }

    }
}